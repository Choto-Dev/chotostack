import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { consola } from "consola";
import { Project, VariableDeclarationKind } from "ts-morph";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ROOT = path.join(__dirname, "../../../../choto-templates/templates");
const OUTPUT = path.join(__dirname, "../src/auto-gen/templates.ts");

const templatesNamespaces: string[] = [];
const templates: {
  label: string;
  value: string;
}[] = [];

/**
 * Collect template infos.
 * @param templatesDir Directroy of templates in `choto-templates/templates`.
 * @param prefix Previous relative path of template from `choto-templates/templates`. Detault is `""`.
 */
async function collectTemplateInfos(templatesDir: string, prefix = "") {
  const items = await fs.readdir(templatesDir);

  for (const item of items) {
    const itemPath = path.join(templatesDir, item);
    const itemStat = await fs.stat(itemPath);
    const templatePrefix = prefix ? `${prefix}/${item}` : item;

    if (itemStat.isDirectory()) {
      if (await isTemplate(itemPath)) {
        templatesNamespaces.push(templatePrefix);

        const templateMeta = JSON.parse(
          await fs.readFile(path.join(itemPath, "/meta/template.json"), "utf-8")
        );
        templates.push({
          label: templateMeta.name,
          value: templatePrefix,
        });
      } else {
        await collectTemplateInfos(itemPath, templatePrefix);
      }
    }
  }
}

/**
 * Check is a directory as template files.
 * @param dir A directory
 * @returns True if the directory has template, otherwise false.
 */
async function isTemplate(dir: string): Promise<boolean> {
  const expectedArray = ["files", "meta", "README.md"];
  const templateItems = await fs.readdir(dir);

  return (
    templateItems.length === expectedArray.length &&
    templateItems.every((item) => expectedArray.includes(item))
  );
}

await collectTemplateInfos(ROOT);

const project = new Project();
const file = project.createSourceFile(OUTPUT, "", { overwrite: true });

// Create `TTemplateNamespace` type.
file.addTypeAlias({
  isExported: true,
  name: "TTemplateNamespace",
  type: templatesNamespaces.map((p) => JSON.stringify(p)).join(" | "),
  docs: ["Auto-generated by scripts/generate-tempate-types.ts"],
});

// Create `TTemplateOption` type.
file.addTypeAlias({
  isExported: true,
  name: "TTemplateOption",
  type: "{ label: string; value: TTemplateNamespace }",
});

// Create `templates` object.
file.addVariableStatement({
  isExported: true,
  declarationKind: VariableDeclarationKind.Const,
  declarations: [
    {
      name: "templates",
      type: "TTemplateOption[]",
      initializer: JSON.stringify(templates, null, 2),
    },
  ],
});

project
  .save()
  .then(() =>
    consola.success(
      `Generated templates.ts with ${templatesNamespaces.length} entries`
    )
  )
  .catch((error) => {
    consola.error(error);
  });
